/*
 * Copyright (c) 2020 Jo√£o Pedro Martins Neves (SHIVAYL) - All Rights Reserved.
 *
 * RegexQuery and all its contents are licensed under the GNU General Public License v3.0
 * (GPL-3.0), located in the root folder, under the name "LICENSE.md".
 *
 */
Bridge.assembly("RegexQuery",function($asm,globals){"use strict";(function(root,factory){typeof define=="function"&&define.amd?define("RegexQuery",factory):typeof module=="object"&&module.exports?module.exports=factory():root.RegexQuery=factory()})(this,function(){var RegexQuery={};return Bridge.define("RegexTokens",{$scope:RegexQuery,$module:"RegexQuery",statics:{fields:{StartOfString:null,EndOfString:null,AnyCharExceptNewLine:null,Word:null,NotWord:null,Digit:null,NotDigit:null,WhiteSpace:null,NotWhiteSpace:null,Tab:null,NewLine:null,CarriageReturn:null,WordBoundary:null,NotWordBoundary:null,FollowedBy:null,NotFollowedBy:null,Or:null},ctors:{init:function(){this.StartOfString="^";this.EndOfString="$";this.AnyCharExceptNewLine=".";this.Word="\\w";this.NotWord="\\W";this.Digit="\\d";this.NotDigit="\\D";this.WhiteSpace="\\s";this.NotWhiteSpace="\\S";this.Tab="\\t";this.NewLine="\\n";this.CarriageReturn="\\r";this.WordBoundary="\\b";this.NotWordBoundary="\\B";this.FollowedBy="?=";this.NotFollowedBy="?!";this.Or="|"}},methods:{Escape:function(token){return"\\"+(token||"")},CharsBetween:function(fromChar,toChar){return System.String.format("[{0}{1}{2}]",fromChar,RegexQuery.Separators.Minus,toChar)},QuantityOfPreceding:function(quantity){return System.String.format("{{{0}}}",[quantity])},QuantityOfPrecedingBetween$1:function(fromCount,toCount){return RegexQuery.RegexTokens.QuantityOfPrecedingBetween(Bridge.toString(fromCount),Bridge.toString(toCount))},QuantityOfPrecedingBetween:function(fromCount,toCount){return System.String.format("{{{0},{1}}}",fromCount,toCount)}}}}),Bridge.define("Separators",{$scope:RegexQuery,$module:"RegexQuery",statics:{fields:{Dot:null,ForwardSlash:null,Minus:null},ctors:{init:function(){this.Dot=".";this.ForwardSlash="/";this.Minus="-"}},methods:{Resolve$1:function(separators,regexEscape){var result,i;for(regexEscape===void 0&&(regexEscape=!0),result=System.Array.init(separators.length,null,System.String),i=0;i<separators.length;++i)result[i]=RegexQuery.Separators.Resolve(separators[i],regexEscape);return result},Resolve:function(separator,regexEscape){regexEscape===void 0&&(regexEscape=!0);switch(separator){case RegexQuery.Separator.Dot:return regexEscape?RegexQuery.RegexTokens.Escape(RegexQuery.Separators.Dot):RegexQuery.Separators.Dot;case RegexQuery.Separator.ForwardSlash:return regexEscape?RegexQuery.RegexTokens.Escape(RegexQuery.Separators.ForwardSlash):RegexQuery.Separators.ForwardSlash;case RegexQuery.Separator.Minus:return regexEscape?RegexQuery.RegexTokens.Escape(RegexQuery.Separators.Minus):RegexQuery.Separators.Minus;default:return""}}}}}),Bridge.define("Separator",{$kind:"enum",$scope:RegexQuery,$module:"RegexQuery",statics:{fields:{Dot:0,ForwardSlash:1,Minus:2,All:3}}}),Bridge.define("RegexQuery.Example",{$scope:RegexQuery,$module:"RegexQuery",methods:{Main:function(){var regexQuery=new RegexQuery.RegexQuery,regexQuery1=regexQuery.RegexQuery$IRegexQueryPatterns$ADate().RegexQuery$RegexQuery$Interfaces$IRegexQueryActions$BeginFollowedBy().RegexQuery$IRegexQueryTokens$ASpace().RegexQuery$IRegexQueryTokens$ANewLine().RegexQuery$RegexQuery$Interfaces$IRegexQueryActions$EndGroup().RegexQuery$RegexQuery$Interfaces$IRegexQueryActions$ToString(),dateSeparators,regexQuery2;regexQuery.RegexQuery$RegexQuery$Interfaces$IRegexQueryActions$Clear();dateSeparators=regexQuery.RegexQuery$RegexQuery$Interfaces$IRegexQueryActions$Group((RegexQuery.RegexTokens.Escape("/")||"")+(RegexQuery.RegexTokens.Or||"")+(RegexQuery.RegexTokens.Escape(".")||"")+(RegexQuery.RegexTokens.Or||"")+(RegexQuery.RegexTokens.Escape("-")||"")).RegexQuery$RegexQuery$Interfaces$IRegexQueryActions$ToString();regexQuery.RegexQuery$RegexQuery$Interfaces$IRegexQueryActions$Clear();regexQuery2=regexQuery.RegexQuery$RegexQuery$Interfaces$IRegexQueryActions$CharsBetween("0","3").RegexQuery$RegexQuery$Interfaces$IRegexQueryActions$ButOnlyNoneOrOne().RegexQuery$RegexQuery$Interfaces$IRegexQueryActions$CharsBetween("0","9").RegexQuery$RegexQuery$Interfaces$IRegexQueryActions$Content(dateSeparators).RegexQuery$RegexQuery$Interfaces$IRegexQueryActions$CharsBetween("0","3").RegexQuery$RegexQuery$Interfaces$IRegexQueryActions$ButOnlyNoneOrOne().RegexQuery$RegexQuery$Interfaces$IRegexQueryActions$CharsBetween("0","9").RegexQuery$RegexQuery$Interfaces$IRegexQueryActions$Content(dateSeparators).RegexQuery$RegexQuery$Interfaces$IRegexQueryActions$CharsBetween("1","9").RegexQuery$IRegexQueryTokens$ADigit().RegexQuery$RegexQuery$Interfaces$IRegexQueryActions$ButOnly(3).RegexQuery$RegexQuery$Interfaces$IRegexQueryActions$NotFollowedBy(RegexQuery.RegexTokens.WhiteSpace).RegexQuery$RegexQuery$Interfaces$IRegexQueryActions$ToString()}}}),Bridge.define("IRegexQueryPatterns",{$kind:"interface",$scope:RegexQuery,$module:"RegexQuery"}),Bridge.define("IRegexQueryTokens",{$kind:"interface",$scope:RegexQuery,$module:"RegexQuery"}),Bridge.define("RegexQuery.Interfaces.IRegexQueryActions",{$kind:"interface",$scope:RegexQuery,$module:"RegexQuery"}),Bridge.define("IRegexQuery",{inherits:[RegexQuery.RegexQuery.Interfaces.IRegexQueryActions,RegexQuery.IRegexQueryTokens,RegexQuery.IRegexQueryPatterns],$kind:"interface",$scope:RegexQuery,$module:"RegexQuery"}),Bridge.define("RegexQuery",{inherits:[RegexQuery.IRegexQuery],$scope:RegexQuery,$module:"RegexQuery",fields:{_openedGroup:!1,Query:null},alias:["Query","RegexQuery$IRegexQuery$Query","toString","RegexQuery$RegexQuery$Interfaces$IRegexQueryActions$ToString","Clear","RegexQuery$RegexQuery$Interfaces$IRegexQueryActions$Clear","BeginningOfString","RegexQuery$RegexQuery$Interfaces$IRegexQueryActions$BeginningOfString","EndOfString","RegexQuery$RegexQuery$Interfaces$IRegexQueryActions$EndOfString","Content","RegexQuery$RegexQuery$Interfaces$IRegexQueryActions$Content","Group","RegexQuery$RegexQuery$Interfaces$IRegexQueryActions$Group","BeginGroup","RegexQuery$RegexQuery$Interfaces$IRegexQueryActions$BeginGroup","EndGroup","RegexQuery$RegexQuery$Interfaces$IRegexQueryActions$EndGroup","AnyOf$1","RegexQuery$RegexQuery$Interfaces$IRegexQueryActions$AnyOf$1","AnyOf","RegexQuery$RegexQuery$Interfaces$IRegexQueryActions$AnyOf","NotAnyOf","RegexQuery$RegexQuery$Interfaces$IRegexQueryActions$NotAnyOf","CharsBetween","RegexQuery$RegexQuery$Interfaces$IRegexQueryActions$CharsBetween","ButOnly","RegexQuery$RegexQuery$Interfaces$IRegexQueryActions$ButOnly","ButOnlyOne","RegexQuery$RegexQuery$Interfaces$IRegexQueryActions$ButOnlyOne","ButOnlyNoneOrOne","RegexQuery$RegexQuery$Interfaces$IRegexQueryActions$ButOnlyNoneOrOne","ButOnlyNoneOrMore","RegexQuery$RegexQuery$Interfaces$IRegexQueryActions$ButOnlyNoneOrMore","ButOnlyOneOrMore","RegexQuery$RegexQuery$Interfaces$IRegexQueryActions$ButOnlyOneOrMore","ButOnlyBetween","RegexQuery$RegexQuery$Interfaces$IRegexQueryActions$ButOnlyBetween","ButOnlyMoreThan","RegexQuery$RegexQuery$Interfaces$IRegexQueryActions$ButOnlyMoreThan","Or","RegexQuery$RegexQuery$Interfaces$IRegexQueryActions$Or","FollowedBy","RegexQuery$RegexQuery$Interfaces$IRegexQueryActions$FollowedBy","NotFollowedBy","RegexQuery$RegexQuery$Interfaces$IRegexQueryActions$NotFollowedBy","BeginFollowedBy","RegexQuery$RegexQuery$Interfaces$IRegexQueryActions$BeginFollowedBy","EndFollowedBy","RegexQuery$RegexQuery$Interfaces$IRegexQueryActions$EndFollowedBy","BeginNotFollowedBy","RegexQuery$RegexQuery$Interfaces$IRegexQueryActions$BeginNotFollowedBy","EndNotFollowedBy","RegexQuery$RegexQuery$Interfaces$IRegexQueryActions$EndNotFollowedBy","ADate","RegexQuery$IRegexQueryPatterns$ADate","ADate$1","RegexQuery$IRegexQueryPatterns$ADate$1","ADateSeparatedBy","RegexQuery$IRegexQueryPatterns$ADateSeparatedBy","ASpace","RegexQuery$IRegexQueryTokens$ASpace","ADigit","RegexQuery$IRegexQueryTokens$ADigit","AWord","RegexQuery$IRegexQueryTokens$AWord","NotAWord","RegexQuery$IRegexQueryTokens$NotAWord","ANewLine","RegexQuery$IRegexQueryTokens$ANewLine","AtStartOfString","RegexQuery$IRegexQueryTokens$AtStartOfString","AtEndOfString","RegexQuery$IRegexQueryTokens$AtEndOfString","ATab","RegexQuery$IRegexQueryTokens$ATab","ACarriageReturn","RegexQuery$IRegexQueryTokens$ACarriageReturn","AWhiteSpace","RegexQuery$IRegexQueryTokens$AWhiteSpace","NotAWhiteSpace","RegexQuery$IRegexQueryTokens$NotAWhiteSpace","AnyCharExceptNewLine","RegexQuery$IRegexQueryTokens$AnyCharExceptNewLine","AWordBoundary","RegexQuery$IRegexQueryTokens$AWordBoundary","NotAWordBoundary","RegexQuery$IRegexQueryTokens$NotAWordBoundary"],ctors:{ctor:function(){this.$initialize();this.Query=""}},methods:{toString:function(){return this.Query},Clear:function(){return this.Query="",this},BeginningOfString:function(){return this.Query=(this.Query||"")+(RegexQuery.RegexTokens.StartOfString||""),this},EndOfString:function(){return this.Query=(this.Query||"")+(RegexQuery.RegexTokens.EndOfString||""),this},Content:function(content){return this.Query=(this.Query||"")+(content||""),this},Group:function(content){return this.BeginGroup(),this.Query=(this.Query||"")+(Bridge.toString(content)||""),this.EndGroup(),this},BeginGroup:function(){return this.Query=(this.Query||"")+"(",this._openedGroup=!0,this},EndGroup:function(){return this.Query=(this.Query||"")+")",this._openedGroup=!1,this},AnyOf$1:function(characters){let joinedCharacters="";for(let i=0;i<characters.length;++i)joinedCharacters+=characters[i];return this.AnyOf(joinedCharacters)},AnyOf:function(characters){return this.Query=(this.Query||"")+(System.String.format("[{0}]",[characters])||""),this},NotAnyOf:function(characters){return this.Query=(this.Query||"")+(System.String.format.apply(System.String,["[^{0}]"].concat(characters))||""),this},CharsBetween:function(fromChar,toChar){return this.Query=(this.Query||"")+(RegexQuery.RegexTokens.CharsBetween(fromChar,toChar)||""),this},ButOnly:function(quantity){return this.Query=(this.Query||"")+(System.String.format("{{{0}}}",[quantity])||""),this},ButOnlyOne:function(){return this.Query=(this.Query||"")+(RegexQuery.RegexTokens.QuantityOfPreceding(1)||""),this},ButOnlyNoneOrOne:function(){return this.Query=(this.Query||"")+"?",this},ButOnlyNoneOrMore:function(){return this.Query=(this.Query||"")+"*",this},ButOnlyOneOrMore:function(){return this.Query=(this.Query||"")+"+",this},ButOnlyBetween:function(fromCount,toCount){return this.Query=(this.Query||"")+(RegexQuery.RegexTokens.QuantityOfPrecedingBetween$1(fromCount,toCount)||""),this},ButOnlyMoreThan:function(quantity){return this.Query=(this.Query||"")+(RegexQuery.RegexTokens.QuantityOfPrecedingBetween(Bridge.toString(quantity),"")||""),this},Or:function(){return this.Query=(this.Query||"")+(RegexQuery.RegexTokens.Or||""),this},FollowedBy:function(content){return this.BeginGroup(),this.Query=(this.Query||"")+(RegexQuery.RegexTokens.FollowedBy||"")+(content||""),this.EndGroup(),this},NotFollowedBy:function(content){return this.BeginGroup(),this.Query=(this.Query||"")+(RegexQuery.RegexTokens.NotFollowedBy||"")+(content||""),this.EndGroup(),this},BeginFollowedBy:function(){return this.BeginGroup(),this.Query=(this.Query||"")+(RegexQuery.RegexTokens.FollowedBy||""),this},EndFollowedBy:function(){return this.EndGroup(),this},BeginNotFollowedBy:function(){return this.BeginGroup(),this.Query=(this.Query||"")+(RegexQuery.RegexTokens.NotFollowedBy||""),this},EndNotFollowedBy:function(){return this.EndGroup(),this},ADate:function(){return this.ADateSeparatedBy()},ADate$1:function(separator){return separator===void 0&&(separator=3),separator===RegexQuery.Separator.All?this.ADateSeparatedBy():this.ADateSeparatedBy(System.Array.init([separator],RegexQuery.Separator))},ADateSeparatedBy:function(separator){separator===void 0&&(separator=null);separator=separator==null?System.Array.init([RegexQuery.Separator.ForwardSlash,RegexQuery.Separator.Dot,RegexQuery.Separator.Minus],RegexQuery.Separator):separator;var separators=RegexQuery.Separators.Resolve$1(separator).join(RegexQuery.RegexTokens.Or);return this.Query=(this.Query||"")+(RegexQuery.RegexTokens.CharsBetween("0","3")||"")+String.fromCharCode(63)+(RegexQuery.RegexTokens.CharsBetween("0","9")||"")+"("+(separators||"")+String.fromCharCode(41)+(RegexQuery.RegexTokens.CharsBetween("0","3")||"")+String.fromCharCode(63)+(RegexQuery.RegexTokens.CharsBetween("0","9")||"")+"("+(separators||"")+String.fromCharCode(41)+(RegexQuery.RegexTokens.CharsBetween("1","9")||"")+(RegexQuery.RegexTokens.Digit||"")+(RegexQuery.RegexTokens.QuantityOfPreceding(3)||""),this},ASpace:function(){return this.Query=(this.Query||"")+(RegexQuery.RegexTokens.WhiteSpace||""),this},ADigit:function(){return this.Query=(this.Query||"")+(RegexQuery.RegexTokens.Digit||""),this},AWord:function(){return this.Query=(this.Query||"")+(RegexQuery.RegexTokens.Word||""),this},NotAWord:function(){return this.Query=(this.Query||"")+(RegexQuery.RegexTokens.NotWord||""),this},ANewLine:function(){return this.Query=(this.Query||"")+(RegexQuery.RegexTokens.NewLine||""),this},AtStartOfString:function(){return this.Query=(this.Query||"")+(RegexQuery.RegexTokens.StartOfString||""),this},AtEndOfString:function(){return this.Query=(this.Query||"")+(RegexQuery.RegexTokens.EndOfString||""),this},ATab:function(){return this.Query=(this.Query||"")+(RegexQuery.RegexTokens.Tab||""),this},ACarriageReturn:function(){return this.Query=(this.Query||"")+(RegexQuery.RegexTokens.CarriageReturn||""),this},AWhiteSpace:function(){return this.Query=(this.Query||"")+(RegexQuery.RegexTokens.WhiteSpace||""),this},NotAWhiteSpace:function(){return this.Query=(this.Query||"")+(RegexQuery.RegexTokens.NotWhiteSpace||""),this},AnyCharExceptNewLine:function(){return this.Query=(this.Query||"")+(RegexQuery.RegexTokens.AnyCharExceptNewLine||""),this},AWordBoundary:function(){return this.Query=(this.Query||"")+(RegexQuery.RegexTokens.WordBoundary||""),this},NotAWordBoundary:function(){return this.Query=(this.Query||"")+(RegexQuery.RegexTokens.NotWordBoundary||""),this}}}),Bridge.init(),RegexQuery})});